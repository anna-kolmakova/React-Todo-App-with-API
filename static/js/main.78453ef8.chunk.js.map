{"version":3,"sources":["types/TextError.ts","types/FilterType.ts","components/ErrorNotification/ErrorNotification.tsx","utils/fetchClient.ts","api/todos.ts","components/Filter/Filter.tsx","components/NewTodo/NewTodo.tsx","components/Loader/Loader.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","api/users.ts","components/Auth/AuthForm.tsx","components/Auth/AuthContext.tsx","App.tsx","index.tsx"],"names":["TextError","FilterType","ErrorNotification","error","setError","useEffect","timer","setTimeout","clearTimeout","data-cy","className","classNames","hidden","type","aria-label","onClick","BASE_URL","wait","delay","Promise","resolve","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","getTodos","userId","addTodo","title","completed","deleteTodo","todoId","updateTodo","property","Filter","typeOfFilter","setTypeOfFilter","todos","setTodos","completedTodoList","activeTodos","useMemo","filter","todo","deleteFinishedTodos","finished","a","forEach","id","Delete","length","href","selected","All","Active","Completed","disabled","NewTodo","newTodoField","createTodo","setTitle","changeProperty","setIsToggling","toggleAll","every","active","map","onSubmit","ref","placeholder","value","onChange","event","target","Loader","TodoItem","removeTodo","selectedTodoId","isToggling","isAdding","useState","doubleClick","setDoubleClick","todoTitleField","setTodoTitleField","useRef","current","focus","useCallback","changeStatus","changeTitle","trim","loaderStatus","onBlur","onKeyDown","key","onDoubleClick","TodoList","TransitionGroup","CSSTransition","timeout","Math","random","getUserByEmail","email","users","createUser","name","AuthForm","onLogin","setEmail","setName","needToRegister","setNeedToRegister","loading","setLoading","errorMessage","setErrorMessage","saveUser","user","localStorage","setItem","userData","getItem","parse","loadUser","handleSubmit","preventDefault","htmlFor","required","e","minLength","AuthContext","React","createContext","AuthProvider","children","setUser","Provider","App","setSelectedTodoId","useContext","setIsAdding","getTodoList","Data","filteredTodos","Title","newTodo","prevTodos","Add","changedTodo","prev","Update","Root","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.78453ef8.chunk.js","sourcesContent":["// eslint-disable-next-line no-shadow\nexport enum TextError {\n  Add = 'Unable to add a todo',\n  Delete = 'Unable to delete a todo',\n  Update = 'Unable to update a todo',\n  Title = 'Title can\\'t be empty',\n  Data = 'Unable to load data',\n  noUser = 'No user found',\n}\n","/* eslint-disable no-shadow */\nexport enum FilterType {\n  All = 'All',\n  Active = 'Active',\n  Completed = 'Completed',\n}\n","import React, { useEffect } from 'react';\nimport classNames from 'classnames';\nimport { TextError } from '../../types/TextError';\n\ntype Props = {\n  error: TextError;\n  setError: (errorMessage: TextError | null) => void;\n};\n\nexport const ErrorNotification: React.FC<Props> = ({ error, setError }) => {\n  const closeError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setError(null);\n    }, (3000));\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  return (\n    <div\n      data-cy=\"ErrorNotification\"\n      className={classNames(\n        'notification is-danger is-light has-text-weight-normal',\n        { hidden: error === null },\n      )}\n\n    >\n      <button\n        data-cy=\"HideErrorButton\"\n        type=\"button\"\n        className=\"delete\"\n        aria-label=\"closeError\"\n        onClick={closeError}\n      />\n      {error}\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Todo } from '../types/Todo';\nimport { client } from '../utils/fetchClient';\n\nexport const getTodos = (userId: number) => {\n  return client.get<Todo[]>(`/todos?userId=${userId}`);\n};\n\nexport const addTodo = (userId: number, title: string) => {\n  return client.post<Todo>('/todos', {\n    userId,\n    completed: false,\n    title,\n  });\n};\n\nexport const deleteTodo = (todoId: number) => {\n  return client.delete(`/todos/${todoId}`);\n};\n\nexport const updateTodo = (\n  todoId: number, property: Partial<Todo>,\n): Promise<Todo> => {\n  return client.patch(`/todos/${todoId}`, property);\n};\n","import React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { FilterType } from '../../types/FilterType';\nimport { deleteTodo } from '../../api/todos';\nimport { TextError } from '../../types/TextError';\n\ntype Props = {\n  typeOfFilter: string;\n  setTypeOfFilter: (filter: FilterType) => void;\n  todos: Todo[];\n  setTodos: (todos: Todo[]) => void;\n  setError: (value: TextError) => void;\n  completedTodoList: Todo[];\n};\n\nexport const Filter: React.FC<Props> = ({\n  typeOfFilter,\n  setTypeOfFilter,\n  todos,\n  setTodos,\n  setError,\n  completedTodoList,\n}) => {\n  const activeTodos = useMemo(() => todos\n    .filter(todo => !todo.completed), [todos]);\n\n  const deleteFinishedTodos = async (finished: Todo[]) => {\n    try {\n      finished.forEach(async (todo) => {\n        await deleteTodo(todo.id);\n\n        setTodos([...activeTodos]);\n      });\n    } catch {\n      setError(TextError.Delete);\n    }\n  };\n\n  return (\n    <footer className=\"todoapp__footer\" data-cy=\"Footer\">\n      <span className=\"todo-count\" data-cy=\"todosCounter\">\n        {`${activeTodos.length} items left`}\n      </span>\n\n      <nav className=\"filter\" data-cy=\"Filter\">\n        <a\n          data-cy=\"FilterLinkAll\"\n          href=\"#/\"\n          className={classNames(\n            'filter__link',\n            { selected: typeOfFilter === FilterType.All },\n          )}\n          onClick={() => setTypeOfFilter(FilterType.All)}\n        >\n          All\n        </a>\n\n        <a\n          data-cy=\"FilterLinkActive\"\n          href=\"#/active\"\n          className={classNames(\n            'filter__link',\n            { selected: typeOfFilter === FilterType.Active },\n          )}\n          onClick={() => setTypeOfFilter(FilterType.Active)}\n        >\n          Active\n        </a>\n\n        <a\n          data-cy=\"FilterLinkCompleted\"\n          href=\"#/completed\"\n          className={classNames(\n            'filter__link',\n            { selected: typeOfFilter === FilterType.Completed },\n          )}\n          onClick={() => setTypeOfFilter(FilterType.Completed)}\n        >\n          Completed\n        </a>\n      </nav>\n\n      <button\n        data-cy=\"ClearCompletedButton\"\n        type=\"button\"\n        className=\"todoapp__clear-completed\"\n        onClick={() => deleteFinishedTodos(completedTodoList)}\n        disabled={completedTodoList.length === 0}\n      >\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n","import classNames from 'classnames';\nimport React, { ChangeEvent, FormEvent, useMemo } from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  newTodoField: React.RefObject<HTMLInputElement>,\n  createTodo: (event: FormEvent) => void,\n  setTitle: (value:string) => void,\n  title: string;\n  changeProperty: (todoId: number, property: Partial<Todo>) => void,\n  setIsToggling: (value: boolean) => void;\n};\n\nexport const NewTodo: React.FC<Props> = ({\n  newTodoField,\n  createTodo,\n  setTitle,\n  title,\n  todos,\n  changeProperty,\n  setIsToggling,\n}) => {\n  const handleSetTitle = (event: ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const toggleAll = todos.every(({ completed }) => completed);\n\n  const activeTodos = useMemo(() => todos\n    .filter(todo => todo.completed === false), [todos]);\n\n  const handleToggleAll = () => {\n    if (activeTodos.length > 0) {\n      setIsToggling(true);\n\n      return activeTodos.map(({ id }) => changeProperty(id, { completed: true }));\n    }\n\n    setIsToggling(true);\n\n    return todos.map(({ id }) => changeProperty(id, { completed: false }));\n  };\n\n  return (\n    <header className=\"todoapp__header\">\n      <button\n        data-cy=\"ToggleAllButton\"\n        type=\"button\"\n        className={classNames('todoapp__toggle-all', { active: toggleAll })}\n        aria-label=\"toggle-button\"\n        onClick={handleToggleAll}\n      />\n\n      <form\n        onSubmit={createTodo}\n      >\n        <input\n          data-cy=\"NewTodoField\"\n          type=\"text\"\n          ref={newTodoField}\n          className=\"todoapp__new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={handleSetTitle}\n        />\n      </form>\n    </header>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\n\nexport const Loader: React.FC = () => {\n  return (\n    <div\n      data-cy=\"TodoLoader\"\n      className={classNames('modal overlay is-active')}\n    >\n      <div className=\"modal-background has-background-white-ter\" />\n      <div className=\"loader\" />\n    </div>\n  );\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React, {\n  useState,\n  useEffect,\n  useRef,\n  ChangeEvent,\n  useMemo,\n  useCallback,\n} from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader/Loader';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  removeTodo:(todoId: number) => void;\n  changeProperty:(todoId: number, property: Partial<Todo>) => void;\n  selectedTodoId: number | null;\n  isToggling: boolean;\n  isAdding: boolean;\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  removeTodo,\n  changeProperty,\n  selectedTodoId,\n  isToggling,\n  isAdding,\n}) => {\n  const { id, title, completed } = todo;\n  const [doubleClick, setDoubleClick] = useState(false);\n  const [todoTitleField, setTodoTitleField] = useState(title);\n  const newTodoField = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n  }, [doubleClick]);\n\n  const deleteTodo = useCallback(() => removeTodo(todo.id), [todo.id]);\n\n  const changeStatus = useCallback(() => changeProperty(id,\n    { completed: !completed }), [id, completed]);\n\n  const changeTitle = useCallback(() => {\n    if (todoTitleField.trim().length === 0) {\n      removeTodo(todo.id);\n      setDoubleClick(false);\n\n      return;\n    }\n\n    if (todoTitleField === todo.title) {\n      setDoubleClick(false);\n    }\n\n    changeProperty(todo.id, { title: todoTitleField });\n    setDoubleClick(false);\n    setTodoTitleField('');\n  }, [todo.id, doubleClick, todoTitleField, todo.title]);\n\n  const handleTitleUpdate = (event: ChangeEvent<HTMLInputElement>) => {\n    setTodoTitleField(event.target.value);\n  };\n\n  const handleBlur = () => {\n    changeTitle();\n    setDoubleClick(false);\n  };\n\n  const onKeyPress = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Escape') {\n      setDoubleClick(false);\n    }\n\n    if (event.key === 'Enter') {\n      changeTitle();\n    }\n  };\n\n  const loaderStatus = useMemo(() => (selectedTodoId === todo.id)\n  || (isAdding && todo.id === 0)\n  || isToggling, [todo.id, selectedTodoId, isAdding, isToggling]);\n\n  return (\n    <div\n      data-cy=\"Todo\"\n      className={classNames('todo', { completed: todo.completed })}\n      key={todo.id}\n    >\n      <label className=\"todo__status-label\">\n        <input\n          data-cy=\"TodoStatus\"\n          type=\"checkbox\"\n          className=\"todo__status\"\n          onChange={changeStatus}\n        />\n      </label>\n\n      { doubleClick\n        ? (\n          <form onSubmit={changeTitle}>\n            <input\n              type=\"text\"\n              data-cy=\"TodoTitleField\"\n              value={todoTitleField}\n              ref={newTodoField}\n              placeholder=\"Empty todo will be deleted\"\n              className=\"todo__title-field\"\n              onBlur={handleBlur}\n              onChange={handleTitleUpdate}\n              onKeyDown={onKeyPress}\n            />\n          </form>\n        )\n        : (\n          <>\n            <span\n              data-cy=\"TodoTitle\"\n              className=\"todo__title\"\n              onDoubleClick={() => {\n                setDoubleClick(true);\n                setTodoTitleField(title);\n              }}\n            >\n              {title}\n            </span>\n            <button\n              type=\"button\"\n              className=\"todo__remove\"\n              data-cy=\"TodoDeleteButton\"\n              onClick={deleteTodo}\n            >\n              ×\n            </button>\n            { loaderStatus && (\n              <Loader />\n            )}\n          </>\n        )}\n    </div>\n  );\n};\n","import React from 'react';\nimport {\n  CSSTransition,\n  TransitionGroup,\n} from 'react-transition-group';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport '../../styles/transitiongroup.scss';\n\ntype Props = {\n  todos: Todo[];\n  removeTodo:(todoId: number) => void;\n  changeProperty:(todoId: number, property: Partial<Todo>) => void;\n  selectedTodoId: number | null;\n  isToggling: boolean;\n  title: string;\n  isAdding: boolean;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  removeTodo,\n  changeProperty,\n  selectedTodoId,\n  isToggling,\n  title,\n  isAdding,\n}) => {\n  return (\n    <section className=\"todoapp__main\" data-cy=\"TodoList\">\n      <TransitionGroup>\n        {todos.map(todo => (\n          <CSSTransition\n            key={todo.id}\n            timeout={300}\n            classNames=\"item\"\n          >\n            <TodoItem\n              todo={todo}\n              removeTodo={removeTodo}\n              changeProperty={changeProperty}\n              selectedTodoId={selectedTodoId}\n              isToggling={isToggling}\n              isAdding={isAdding}\n            />\n          </CSSTransition>\n        ))}\n\n        {isAdding && (\n          <CSSTransition\n            key={0}\n            timeout={300}\n            classNames=\"temp-item\"\n          >\n            <TodoItem\n              key={Math.random()}\n              todo={{\n                id: 0,\n                title,\n                completed: false,\n                userId: Math.random(),\n              }}\n              removeTodo={removeTodo}\n              changeProperty={changeProperty}\n              selectedTodoId={selectedTodoId}\n              isToggling={isToggling}\n              isAdding={isAdding}\n\n            />\n          </CSSTransition>\n        )}\n      </TransitionGroup>\n    </section>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserByEmail = async (email: string) => {\n  const users = await client.get<User[]>(`/users?email=${email}`);\n\n  return users[0] || null;\n};\n\ntype UserData = Pick<User, 'name' | 'email'>;\n\nexport const createUser = async ({ email, name }: UserData) => {\n  return client.post<User>('/users', { email, name });\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { createUser, getUserByEmail } from '../../api/users';\nimport { User } from '../../types/User';\n\nexport type Props = {\n  onLogin: (user: User) => void,\n};\n\nexport const AuthForm: React.FC<Props> = ({ onLogin }) => {\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [needToRegister, setNeedToRegister] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const saveUser = (user: User) => {\n    localStorage.setItem('user', JSON.stringify(user));\n    onLogin(user);\n  };\n\n  useEffect(() => {\n    const userData = localStorage.getItem('user');\n\n    if (!userData) {\n      return;\n    }\n\n    try {\n      const user = JSON.parse(userData) as User;\n\n      onLogin(user);\n    } catch (error) {\n      // Need to login\n    }\n  }, []);\n\n  const loadUser = async () => {\n    const user = await getUserByEmail(email);\n\n    if (user) {\n      saveUser(user);\n    } else {\n      setNeedToRegister(true);\n    }\n  };\n\n  const registerUser = () => {\n    return createUser({ name, email })\n      .then(saveUser);\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setErrorMessage('');\n    setLoading(true);\n\n    try {\n      if (needToRegister) {\n        await registerUser();\n      } else {\n        await loadUser();\n      }\n    } catch (error) {\n      setErrorMessage('Something went wrtong');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"box mt-5\">\n      <h1 className=\"title is-3\">\n        {needToRegister ? 'You need to register' : 'Log in to open todos'}\n      </h1>\n\n      <div className=\"field\">\n        <label className=\"label\" htmlFor=\"user-email\">\n          Email\n        </label>\n\n        <div\n          className={classNames('control has-icons-left', {\n            'is-loading': loading,\n          })}\n        >\n          <input\n            type=\"email\"\n            id=\"user-email\"\n            className={classNames('input', {\n              'is-danger': !needToRegister && errorMessage,\n            })}\n            placeholder=\"Enter your email\"\n            disabled={loading || needToRegister}\n            value={email}\n            required\n            onChange={e => setEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n        </div>\n\n        {!needToRegister && errorMessage && (\n          <p className=\"help is-danger\">{errorMessage}</p>\n        )}\n      </div>\n\n      {needToRegister && (\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"user-name\">\n            Your Name\n          </label>\n\n          <div\n            className={classNames('control has-icons-left', {\n              'is-loading': loading,\n            })}\n          >\n            <input\n              type=\"text\"\n              id=\"user-name\"\n              className={classNames('input', {\n                'is-danger': needToRegister && errorMessage,\n              })}\n              placeholder=\"Enter your name\"\n              required\n              minLength={4}\n              disabled={loading}\n              value={name}\n              onChange={e => setName(e.target.value)}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-user\" />\n            </span>\n          </div>\n\n          {needToRegister && errorMessage && (\n            <p className=\"help is-danger\">{errorMessage}</p>\n          )}\n        </div>\n      )}\n\n      <div className=\"field\">\n        <button\n          type=\"submit\"\n          className={classNames('button is-primary', {\n            'is-loading': loading,\n          })}\n        >\n          {needToRegister ? 'Register' : 'Login'}\n        </button>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { User } from '../../types/User';\nimport { AuthForm } from './AuthForm';\n\nexport const AuthContext = React.createContext<User | null>(null);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const AuthProvider: React.FC<Props> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  if (!user) {\n    return <AuthForm onLogin={setUser} />;\n  }\n\n  return (\n    <AuthContext.Provider value={user}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import React, {\n  FormEvent,\n  useEffect,\n  useRef,\n  useState,\n  useContext,\n  useCallback,\n  useMemo,\n} from 'react';\nimport { TextError } from './types/TextError';\nimport {\n  ErrorNotification,\n} from './components/ErrorNotification/ErrorNotification';\nimport { Filter } from './components/Filter/Filter';\nimport { NewTodo } from './components/NewTodo/NewTodo';\nimport { TodoList } from './components/TodoList/TodoList';\nimport {\n  getTodos,\n  addTodo,\n  deleteTodo,\n  updateTodo,\n} from './api/todos';\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/FilterType';\nimport { AuthContext } from './components/Auth/AuthContext';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [typeOfFilter, setTypeOfFilter] = useState(FilterType.All);\n  const [error, setError] = useState<TextError | null>(null);\n  const [title, setTitle] = useState('');\n  const [selectedTodoId, setSelectedTodoId] = useState<number | null>(null);\n  const [isToggling, setIsToggling] = useState(false);\n  const user = useContext(AuthContext);\n  const newTodoField = useRef<HTMLInputElement>(null);\n  const [isAdding, setIsAdding] = useState(false);\n\n  const userId = user?.id || 0;\n\n  const getTodoList = async () => {\n    try {\n      setTodos(await getTodos(userId));\n    } catch {\n      setError(TextError.Data);\n    }\n  };\n\n  useEffect(() => {\n    if (newTodoField.current) {\n      newTodoField.current.focus();\n    }\n\n    getTodoList();\n  }, []);\n\n  const filteredTodos = useMemo(() => todos.filter(todo => {\n    switch (typeOfFilter) {\n      case FilterType.Active:\n        return !todo.completed;\n      case FilterType.Completed:\n        return todo.completed;\n      default:\n        return todo;\n    }\n  }), [typeOfFilter, todos]);\n\n  const createTodo = useCallback(async (event: FormEvent) => {\n    event.preventDefault();\n    setIsAdding(true);\n\n    if (title.trim().length === 0 || !user) {\n      setError(TextError.Title);\n      setIsToggling(false);\n\n      return;\n    }\n\n    try {\n      const newTodo = await addTodo(user.id, title);\n\n      setTodos(prevTodos => [...prevTodos, newTodo]);\n    } catch {\n      setError(TextError.Add);\n    }\n\n    setTitle('');\n    setIsAdding(false);\n  }, [title, user]);\n\n  const removeTodo = async (todoId: number) => {\n    setSelectedTodoId(todoId);\n    try {\n      await deleteTodo(todoId);\n      setTodos(prevTodos => prevTodos\n        .filter(todo => todo.id !== todoId));\n    } catch {\n      setError(TextError.Delete);\n    }\n\n    setSelectedTodoId(0);\n  };\n\n  const changeProperty = async (todoId: number, property: Partial<Todo>) => {\n    setSelectedTodoId(todoId);\n    try {\n      const changedTodo: Todo = await updateTodo(todoId, property);\n\n      setTodos(prev => prev.map(todo => (\n        todo.id === todoId\n          ? changedTodo\n          : todo\n      )));\n    } catch {\n      setError(TextError.Update);\n    }\n\n    setSelectedTodoId(0);\n    setIsToggling(false);\n  };\n\n  const completedTodoList = useMemo(() => todos\n    .filter(todo => todo.completed), [todos]);\n\n  return (\n    <div className=\"todoapp\">\n      <h1 className=\"todoapp__title\">todos</h1>\n\n      <div className=\"todoapp__content\">\n        <NewTodo\n          newTodoField={newTodoField}\n          createTodo={createTodo}\n          title={title}\n          setTitle={setTitle}\n          todos={todos}\n          changeProperty={changeProperty}\n          setIsToggling={setIsToggling}\n        />\n        {(todos.length > 0) && (\n          <TodoList\n            todos={filteredTodos}\n            removeTodo={removeTodo}\n            changeProperty={changeProperty}\n            selectedTodoId={selectedTodoId}\n            isToggling={isToggling}\n            title={title}\n            isAdding={isAdding}\n\n          />\n        )}\n        <Filter\n          typeOfFilter={typeOfFilter}\n          setTypeOfFilter={setTypeOfFilter}\n          todos={todos}\n          completedTodoList={completedTodoList}\n          setError={setError}\n          setTodos={setTodos}\n        />\n      </div>\n\n      {error && (\n        <ErrorNotification\n          error={error}\n          setError={setError}\n        />\n      )}\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './styles/index.scss';\nimport React from 'react';\nimport { App } from './App';\nimport { AuthProvider } from './components/Auth/AuthContext';\n\nconst Root = () => (\n  <AuthProvider>\n    <App />\n  </AuthProvider>\n);\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(<Root />);\n"],"sourceRoot":""}